{
  "guias": [
    {
      "id": "Correccion de UUID en linux",
      "titulo": "Correccion de UUID en linux (/etc/fstab) MX linux",
      "descripcion": " Recuperaci√≥n del sistema MX Linux tras error en el archivo fstab por UUID incorrectos",
      "manual": "Modifiqu√© el archivo `/etc/fstab` en mi laptop sin darme cuenta de que estaba usando los UUIDs de otro sistema (un servidor). Al reiniciar, el sistema MX Linux entr√≥ en \"modo de emergencia\" y no arrancaba.\n\nEl mensaje dec√≠a:\n\"No se puede dar acceso a la consola: la cuenta root est√° bloqueada.\"\n\nEsto sucede cuando el sistema intenta montar particiones que no existen o est√°n mal referenciadas.\n\n¬øQU√â ES EL FSTAB?\nEs un archivo que le dice a Linux qu√© particiones montar al arrancar y c√≥mo hacerlo. Si se usa un UUID incorrecto (identificador de disco), el sistema falla al iniciar.\n\n\n\n\n\n\n",
      "imagen": "solution.webp",
      "categoria": "Servidores",
      "fecha": "2025-01-15",
      "contenido": "En esta gu√≠a aprender√°s a solucionar problemas comunes con usuarios en Jellyfin...",
      "contexto": "Modifiqu√© el archivo `/etc/fstab` en mi laptop sin darme cuenta de que estaba usando los UUIDs de otro sistema (un servidor). Al reiniciar, el sistema MX Linux entr√≥ en \"modo de emergencia\" y no arrancaba.\n\n",
      "problema": "El mensaje dec√≠a:\n\"No se puede dar acceso a la consola: la cuenta root est√° bloqueada.\" y se quedaba e el logo\nEsto sucede cuando el sistema intenta montar particiones que no existen o est√°n mal referenciadas.\n",
      "solucion": "Arranqu√© una USB Live (us√© Elementary OS Live) por que no tenia otra, puede ser cualquiera que tenga herramientas de particiones basicas \n\nAbr√≠ una terminal en elementary y detect√© las particiones reales con: lsblk o lsblk -f\nTe aparecera la usb live en mi caso (Elementary os) , y el disco de laptop o pc donde tenias tu sistema,algo como: \n<br>\n NAME   FSTYPE LABEL  SIZE  MOUNTPOINT\nsdb                       32gb\n‚îú‚îÄsdb1 ext4   usb_live con elementary          \nsda                       120G  \n‚îú‚îÄsda1 ext4    swamp(etc)  512M  \n‚îî‚îÄsda2 ext4   mxlinux     119G  \n\n Monta solo la partici√≥n ra√≠z (probablemente /dev/sda2)\n---- sudo mount /dev/sda2 /mnt ----\n\n(/mnt) sera la carpeta donde se montara \n\nopcional(si te da un error de superbloque o algo asi puedes intentar repararlo si tiene la herramienta) fsck , asi sudo fsck /dev/sda2\n\nSi todo va bien despu√©s de montar\n\nsudo mount --bind /dev /mnt/dev\nsudo mount --bind /proc /mnt/proc\nsudo mount --bind /sys /mnt/sys\n y ahora:\n<br> sudo chroot /mnt\n(passwd root)\n\nuna vez dentro estara como en una consola dentro de otra, y podras buscar y modifica el archivo con, nano /etc/fstab, nano es la herramienta y /etc/fstab la ruta\nyo use micro que es un editor como nano pero se me hace mas comodo:\n\n micro /etc/fstab\n\n"
    },
    {
      "id": "kitty-zellij-starship",
      "titulo": "Personalizaci√≥n moderna de terminal con Kitty, Zellij, Tmux, Starship y Neofetch",
      "descripcion": "Gu√≠a paso a paso para personalizar tu terminal usando Kitty con Zellij/Tmux, Neofetch, Starship, y temas visuales como Tokyo Night. Incluye c√≥mo activar autocompletado, temas, e integraci√≥n de im√°genes.",
      "manual": "Quer√≠a personalizar mi terminal para que tuviera un estilo moderno y funcional. Antes usaba Zellij con Kitty y quer√≠a alternar con Tmux para comparar, pero al final decid√≠ volver a Zellij. Tambi√©n integr√© Neofetch, Starship y el tema Tokyo Night. Aqu√≠ resumo los problemas que resolv√≠ y c√≥mo lo hice.",
      "imagen": "terminal-setup.webp",
      "categoria": "Personalizaci√≥n Linux",
      "fecha": "2025-07-18",
      "contenido": "Transforma tu terminal Linux en un entorno moderno, informativo y atractivo visualmente usando Kitty, Zellij, Tmux, Starship, y temas modernos.",
      "contexto": "Estaba usando Kitty como terminal y Zellij como multiplexor, pero quer√≠a probar Tmux. Tambi√©n quer√≠a usar Neofetch con imagen, mejorar el prompt, activar autocompletado, y aplicar un tema visual moderno como Tokyo Night.",
      "problema": "Quer√≠a cambiar de Zellij a Tmux, activar autocompletado, mostrar una imagen al lado de Neofetch (no ASCII), cambiar el prompt (`‚ûú ~`) que me parec√≠a feo, y aplicar un tema moderno a Kitty. No recordaba qu√© archivos modificar para que Zellij se iniciara autom√°ticamente ni c√≥mo mostrar la imagen en Neofetch.",
      "solucion": "**1. Verificar si estaba en Tmux o Zellij:**\n```bash\nps -aux | grep -E 'zellij|tmux'\n```\n\n**2. Hacer que Tmux se ejecute autom√°ticamente en Fish (si fuera el caso):**\n```fish\nnano ~/.config/fish/config.fish\n```\nAgregar:\n```fish\nif status is-interactive; and not set -q TMUX; tmux attach || tmux new; end\n```\n\n**3. Volver a Zellij autom√°ticamente al abrir Kitty:**\nEditar de nuevo:\n```fish\nnano ~/.config/fish/config.fish\n```\nAgregar (para evitar conflicto con Tmux):\n```fish\nif status is-interactive; and not set -q TMUX; and not set -q ZELLIJ; zellij attach --create; end\n```\n\n**4. Mostrar imagen con Neofetch usando `chafa` (ya que `kitty +kitten icat` no funcionaba):**\n```bash\nchafa ~/Im√°genes/diseno.png\n```\nY para que se muestre al iniciar:\n```bash\nnano ~/.config/fish/config.fish\n```\nAgregar:\n```fish\nneofetch && chafa ~/Im√°genes/diseno.png\n```\n\n**5. Aplicar tema Tokyo Night a Kitty:**\n```bash\nmkdir -p ~/.config/kitty/themes\ncurl -L https://raw.githubusercontent.com/dexpota/kitty-themes/master/themes/Tokyo%20Night.conf -o ~/.config/kitty/themes/tokyo-night.conf\nnano ~/.config/kitty/kitty.conf\n```\nAgregar:\n```conf\ninclude themes/tokyo-night.conf\n```\n\n**6. Cambiar prompt `‚ûú ~` usando Starship:**\nInstalar Starship:\n```bash\ncurl -sS https://starship.rs/install.sh | sh\n```\nAgregar a `~/.config/fish/config.fish`:\n```fish\nstarship init fish | source\n```\nLuego configurar Starship:\n```bash\nmkdir -p ~/.config\nnano ~/.config/starship.toml\n```\nEjemplo b√°sico:\n```toml\n[character]\nsuccess_symbol = \"[‚ùØ](bold blue)\"\nerror_symbol = \"[‚úó](bold red)\"\n[directory]\nstyle = \"bold bright-yellow\"\n```\n\n**7. Activar autocompletado en Zsh (cuando usaba Zsh):**\nAgregar a `~/.zshrc`:\n```zsh\nfpath=(~/.zsh/zsh-completions/src $fpath)\nautoload -Uz compinit bashcompinit\ncompinit\nbashcompinit\n```\n\n**8. Mejora completa del `.zshrc`**\nIncluyendo plugins, alias, autocompletado y Starship:\n```zsh\nplugins=(git z sudo command-not-found)\neval \"$(starship init zsh)\"\nsource $ZSH/oh-my-zsh.sh\nalias zshconfig=\"nvim ~/.zshrc\"\nalias reload=\"source ~/.zshrc\"\n```\n",
      "notas": "- El uso de `chafa` fue √∫til como alternativa visual ligera.\n- Kitty no soporta `icat` si no est√° compilado con soporte de gr√°ficos, por eso `chafa` fue mejor soluci√≥n.\n- La combinaci√≥n de Fish + Starship + Zellij con tema Tokyo Night es visualmente atractiva y productiva.",
      "tags": ["kitty", "zellij", "tmux", "fish", "zsh", "neofetch", "starship", "chafa", "autocompletado", "temas"]
    },
    {
      "id": "servidor-debian-pruebas-luks-wifi-jellyfin",
      "titulo": "Configuraci√≥n de servidor Debian para pruebas, medios y administraci√≥n sin contrase√±a al inicio (LUKS + Jellyfin + Red)",
      "descripcion": "Transformaci√≥n de un servidor Debian cifrado en un entorno multimedia y de pruebas, con acceso por red, Jellyfin, y desbloqueo autom√°tico del disco al arranque.",
      "manual": "Inici√© con un sistema Debian reci√©n instalado y cifrado (LUKS) que me ped√≠a contrase√±a en cada arranque. Adem√°s, el usuario `ahir` no ten√≠a acceso a `sudo` y necesitaba conectar el sistema a una red Wi-Fi diferente, instalar herramientas de red, disco y multimedia como Jellyfin, y automatizar el desbloqueo del disco al inicio.\n\n\n## 1. üßë‚Äçüíª Agregar usuario al grupo sudo (ahir no ten√≠a privilegios)\n\nEl error original era:\n```bash\nahir is not in the sudoers file\n```\n\nAcced√≠ como root y verifiqu√© que el usuario s√≠ estaba en el grupo sudo:\n```bash\ngroups ahir\n```\n\nPero el comando `sudo` no estaba instalado, as√≠ que lo instal√©:\n```bash\napt update\napt install sudo\n```\n\n\n## 2. üì° Configurar Wi-Fi con WPA Supplicant\n\nPara conectar a otra red Wi-Fi desde consola:\n\nObtener configuraci√≥n:\n```bash\nwpa_passphrase \"NombreDeRed\" \"contrase√±a\" | tee /etc/wpa_supplicant/wpa_supplicant.conf\n```\n\nLevantar conexi√≥n:\n```bash\nwpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf\n\n# Luego obtener IP:\ndhclient wlan0\n```\n\n(Alternativas como `nmtui` o `nmcli` tambi√©n funcionan si tienes NetworkManager.)\n\n\n## 3. üì¶ Instalar herramientas √∫tiles en servidor Debian\n\nCre√© un peque√±o script para instalar:\n```bash\napt install curl htop neofetch smartmontools net-tools gparted iftop iotop nmap openssh-server\n```\n\nY para Jellyfin:\n```bash\napt install apt-transport-https\ncurl -fsSL https://repo.jellyfin.org/debian/jellyfin_team.gpg.key | gpg --dearmor -o /etc/apt/trusted.gpg.d/jellyfin.gpg\n\necho \"deb [arch=$( dpkg --print-architecture )] https://repo.jellyfin.org/debian bookworm main\" | tee /etc/apt/sources.list.d/jellyfin.list\n\napt update\napt install jellyfin\n```\n\n\n## 4. üîê Automatizar desbloqueo de disco LUKS\n\nCada vez que iniciaba, ten√≠a que ingresar la contrase√±a del disco manualmente.\nEleg√≠ la opci√≥n **dejar el cifrado pero desbloquearlo autom√°ticamente con un archivo de clave**.\n\nCre√© un script `desbloque.sh` que hace:\n- Crea una clave binaria:\n```bash\ndd if=/dev/urandom of=/root/luks.key bs=1024 count=4\nchmod 600 /root/luks.key\n```\n\n- Agrega la clave al volumen LUKS:\n```bash\ncryptsetup luksAddKey /dev/sda3 /root/luks.key\n```\n\n- Edita `/etc/crypttab`:\n```bash\necho \"cryptroot UUID=xxxxxxx /root/luks.key luks\" >> /etc/crypttab\n```\n\n- Regenera `initramfs`:\n```bash\nupdate-initramfs -u\n```\n\n> Nota: Tuve que instalar `cryptsetup` porque no ven√≠a:\n```bash\napt install cryptsetup\n```\n\n\n## üß™ Verificaciones finales\n\n- Confirm√© que `/etc/crypttab` estaba correctamente configurado.\n- Prob√© reiniciar el sistema, y ya no pide la contrase√±a de LUKS al arrancar.\n\n\n\n",
      "imagen": "debian-server-setup.webp",
      "categoria": "Servidores",
      "fecha": "2025-07-25",
      "contenido": "En esta gu√≠a detallada se muestra c√≥mo convertir un Debian cifrado en un servidor multimedia con Jellyfin, acceso por red, y sin necesidad de ingresar contrase√±a de disco al arrancar.",
      "contexto": "Instal√© Debian como servidor personal cifrado con LUKS. Cada inicio requer√≠a introducir la contrase√±a desde el teclado f√≠sico, lo cual era molesto para un servidor que deb√≠a funcionar autom√°ticamente. Tambi√©n enfrent√© problemas de permisos (usuario sin sudo), de conectividad Wi-Fi, y de instalaci√≥n de herramientas de red y medios.",
      "problema": "El usuario no ten√≠a acceso a sudo, no pod√≠a conectarse a otra red Wi-Fi f√°cilmente, el sistema requer√≠a contrase√±a en cada inicio debido al cifrado LUKS, y faltaban herramientas clave como Jellyfin o SSH.",
      "solucion": "Instal√© `sudo`, conect√© la red Wi-Fi manualmente usando `wpa_supplicant`, agregu√© herramientas b√°sicas de servidor y multimedia con apt, y cre√© un script que automatiza la creaci√≥n de una clave de desbloqueo LUKS y su integraci√≥n en `/etc/crypttab`, regenerando luego `initramfs` para que el disco se desbloquee autom√°ticamente al iniciar."
    },
    
    
    {
      "id": "jellyfin-permisos",
      "titulo": "Configuraci√≥n y recuperaci√≥n de Jellyfin en Ubuntu 24.04",
      "descripcion": "Proceso completo de configuraci√≥n, soluci√≥n de errores, permisos y recuperaci√≥n de Jellyfin en un sistema Ubuntu con poco espacio en disco.",
      "manual": "Instal√© Jellyfin en Ubuntu 24.04 y al intentar usarlo encontr√© m√∫ltiples errores, entre ellos que no pod√≠a acceder m√°s all√° de /home/ahir, fallas al reproducir contenido y fallos del servicio Jellyfin. Tambi√©n tuve un error de espacio en disco que llev√≥ a un fallo general de Jellyfin (core-dump).\n\n1. **Permisos de acceso**: Jellyfin no pod√≠a leer mis carpetas personales. Us√©:\n  - `sudo setfacl -m u:jellyfin:rx /home/ahir`\n  - `sudo setfacl -R -m u:jellyfin:rx /home/ahir/peliculas`\n2. Instal√© `acl` si no estaba:\n  - `sudo apt install acl`\n3. **Errores de reproducci√≥n**: Jellyfin pausaba pel√≠culas. Verifiqu√© logs con:\n  - `journalctl -u jellyfin -n 50`\n4. **Error 'core-dump'**: El servicio se deten√≠a tras varios intentos.\n  - Limpi√© espacio con `ncdu` y `sudo apt autoremove`\n  - Verifiqu√© uso de disco con `df -h` y `du -sh *`\n5. **Carpeta de configuraci√≥n rota**: Elimin√© la config da√±ada:\n  - `sudo rm -rf /var/lib/jellyfin/config`\n6. **Jellyfin no levantaba**: Reinici√© el servicio con:\n  - `sudo systemctl restart jellyfin`\n7. **Conexi√≥n r√°pida**: Acced√≠ con c√≥digo desde:\n  - `http://localhost:8096/web/index.html#/quickconnect`\n8. **Error en login**: No recordaba usuario. Cre√© uno nuevo con script bash y us√© Quick Connect.\n9. **Verifiqu√© entorno**:\n  - Jellyfin versi√≥n 10.10.7\n  - Ubuntu 24.04 LTS\n10. **Espacio en disco**: Aunque ten√≠a 230 GB, solo 100 GB estaban en uso. Us√© `lsblk`, `df -h`, `du`, `ncdu` para buscar espacio oculto y limpiar.\n11. **Permisos de ejecuci√≥n**:\n  - `sudo usermod -aG ahir jellyfin`\n  - `chmod 750 /home/ahir`\n12. **Montaje autom√°tico**: Edit√© `/etc/fstab` si ten√≠a carpetas en otras particiones.\n13. **Verifiqu√© ejecuci√≥n como usuario Jellyfin**:\n  - `sudo -u jellyfin ls /home/ahir/peliculas`\n14. **Reinstal√© Jellyfin si fue necesario**:\n  - `sudo apt purge jellyfin`\n  - `sudo apt install jellyfin`\n15. Finalmente acced√≠ con usuario nuevo o usando Quick Connect exitosamente.",
      "imagen": "jellyfin-error-login.webp",
      "categoria": "Servidores",
      "fecha": "2025-07-09",
      "contenido": "En esta gu√≠a aprender√°s a resolver m√∫ltiples problemas de configuraci√≥n, acceso y espacio en disco con Jellyfin en Ubuntu.",
      "contexto": "Al instalar Jellyfin en mi equipo con Ubuntu 24.04, el sistema funcionaba parcialmente: no pod√≠a acceder a carpetas de pel√≠culas, las pel√≠culas se pausaban tras minutos, y el servicio fallaba con errores tipo core-dump.",
      "problema": "Jellyfin no pod√≠a acceder m√°s all√° de /home/ahir; no reproduc√≠a videos correctamente; el sistema se quedaba sin espacio libre causando errores y detenci√≥n completa del servicio Jellyfin.",
      "solucion": "Le di permisos de lectura al usuario `jellyfin` con `setfacl`; limpi√© espacio en disco con `ncdu`, `du` y `apt autoremove`; elimin√© configuraciones corruptas; reinici√© el servicio y acced√≠ mediante Quick Connect; tambi√©n cre√© un nuevo usuario manualmente desde consola y verifiqu√© logs constantemente con `journalctl` para cada error."
    },
    
    {
      "id": "montar-discos-debian",
      "titulo": "C√≥mo instal√© y configur√© Uptime Kuma en mi servidor Debian",
      "descripcion": "Instalacion sencilla",
      "manual": "",
      "imagen": "",
      "categoria": " Servidores",
      "fecha": "2025-01-10",
      "contenido": "Gu√≠a completa para montar discos externos en sistemas Debian...",
      "contexto": "Uptime Kuma es un dasboard donde puedes ver en tiempo real tus solicitudes, sitios web o solo request, muy util puedes ver el manual en el repo oficial (https://github.com/louislam/uptime-kuma)",
      "problema": "Ninguno",
      "solucion": "Instal√© Node.js y npm (porque me marcaba que no ten√≠a npm), actualize a mi la ultima version \n<b>curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -</b>\ny \n<b>sudo apt install -y nodejs</b>\n\nVerifiqu√© que se instal√≥ correctamente:\nnode -v\nnpm -v\n\nClon√© el repositorio de Uptime Kuma y lo prepare,\n\n<b>git clone https://github.com/louislam/uptime-kuma.git</b>\n\ncd uptime-kuma\nnpm run setup\n\nHice que Uptime Kuma funcione para toda mi red, no solo en mi servidor .Por defecto, Uptime Kuma corre solo en localhost (127.0.0.1), as√≠ que no se puede acceder desde otra PC.\nPara cambiarlo a que funcione en toda la red local (IP 0.0.0.0), edit√© o cre√© el archivo:\n\ncp server/config.example.js server/config.js\n\neditamos:\n\nnano server/config.js \nen mi caso:\nmicro server/config.js\n\nme queda algo asi,\n module.exports = {\n    port: 3001,\n    hostname: \"0.0.0.0\"\n};\n\nojo, hay muchos exports, solo agrega la ip frente al hostname,\nY lo levant√© as√≠:\n\npm2 start server/server.js --name uptime-kuma\n\ncambia start por stop para parar,Abr√≠ el puerto en el firewall para que mi red pueda acceder (si no usas ufw no lo hagas)\n\nsudo ufw allow 3001/tcp\nsudo ufw reload\n\ny ya acedi a la ip del servidor con el puerto que venia en kuma que por defecto es 3001\nhay otra forma de instalarlo con docker pero hasta aqui debe funcionar"
    },
    {
      "id": "configurar-nginx",
      "titulo": "C√≥mo empaquet√© mi programa en .deb e instalable con APT",
      "descripcion": "Guia",
      "manual": "",
      "imagen": "",
      "categoria": "Linux",
      "fecha": "2025-01-05",
      "contenido": "Aprende a configurar Nginx como proxy reverso paso a paso...",
      "contexto": "Convertir tu script Python (por ejemplo: mini_top.py) en un paquete .deb instalable desde cualquier PC con:\n    sudo apt install (ejemplo:mini-top)",
      "problema": "Al principio, mi paquete se instalaba, pero el comando <code>mini-top</code> no funcionaba. Descubr√≠ que el script necesitaba cumplir ciertos requisitos:\n\n  <li>Empezar con <code>#!/usr/bin/env python3</code> en la primera l√≠nea (shebang)</li>\n  <li>Estar ubicado en <code>/usr/bin/mini-top</code> (sin extensi√≥n)</li>\n  <li>Tener permisos de ejecuci√≥n con <code>chmod +x</code></li>\nLa estructura del paquete debe ser as√≠:\n<code>\nbuild/mini-top/\n‚îú‚îÄ‚îÄ DEBIAN/control\n‚îî‚îÄ‚îÄ usr/bin/mini-top\n</code>\nPara empaquetarlo:\n<code>dpkg-deb --build build/mini-top</code>\nY para construir el √≠ndice APT necesario:\n<code>\ndpkg-scanpackages . /dev/null | gzip -9c > Packages.gz\n</code>\nLuego sub√≠ el <code>.deb</code> y el <code>Packages.gz</code> a la rama <code>gh-pages</code> de GitHub para alojarlos p√∫blicamente.\n",
      "solucion": "Paso 1: Prepara la estructura del paquete .deb\n1. Crea la estructura base:\n    mkdir -p build/mini-top/DEBIAN\n    mkdir -p build/mini-top/usr/bin\n\n2. Copia tu script (el mio era .py python)y ren√≥mbralo:\n    cp mini_top.py build/mini-top/usr/bin/mini-top\n\n3. Hazlo ejecutable puedes usar sudo si te da error:\n    chmod +x build/mini-top/usr/bin/mini-top\n\n4. Aseg√∫rate de que el script empiece con:\n    #!/usr/bin/env python3\n\nPaso 2: Crea el archivo de control\n1. Crea el archivo DEBIAN/control:\n    nano build/mini-top/DEBIAN/control\n\n2. Agrega el siguiente contenido acorde a tus datos:\n\n    Package: mini-top\n    Version: 1.0.1\n    Section: utils\n    Priority: optional\n    Architecture: all\n    Maintainer: TuNombre <tunombre@ejemplo.com>\n    Description: Monitor ligero de CPU y RAM para terminal\n\nPaso 3: Empaqueta en .deb\n\n1. Ejecuta:\n    dpkg-deb --build build/mini-top\nEsto generar√° el archivo:\n    build/mini-top.deb\n\nPaso 4: Prepara tu repositorio APT en GitHub Pages\n1. Crea una carpeta en tu repositorio GitHub llamada `apt/`\n2. Copia el archivo .deb a esa carpeta(el archivo deb que dejo la carpeta buil):\n    cp build/mini-top.deb apt/mini-top.deb\n\n3.Entra a la carpeta:\n    cd apt\n4. Genera el √≠ndice de paquetes:\n    dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz\n\nPaso 5: Sube a GitHub Pages\n1. Aseg√∫rate de estar en la rama gh-pages:\n    git checkout gh-pages, o creala\n2. Agrega los archivos:\n    git add mini-top.deb Packages.gz\n3. Confirma los cambios:\n    git commit -m \"Publicar mini-top.deb y Packages.gz\"\n4. Sube a GitHub:\n    git push origin gh-pages\n\nPaso 6: Instala desde otra PC o servidor\n\n1. Agrega el repositorio:\n    echo \"deb [trusted=yes] https://TU_USUARIO.github.io/TU_REPO/apt/ ./\" | sudo tee /etc/apt/sources.list.d/mini-top.list\n\n2. Actualiza la lista:\n    sudo apt update\n3.Instala el paquete:\n    sudo apt install mini-top\n\n Ejecuta o en tu caso tu nombre de tu scrip:\n    mini-top\n\nExtra: Limpiar e intentar de nuevo\n\n1. Elimina el paquete instalado:\n    sudo apt purge mini-top\n\n2. Borra el archivo .list:\n    sudo rm /etc/apt/sources.list.d/mini-top.list\n\n3. Limpia el cache:\n    sudo apt update\n\n\n"
    },
    {
      "id": "netlify-react-cloundflare",
      "titulo": "Deploy de sitio est√°tico con React + HTML usando Netlify y Cloudflare",
      "descripcion": "C√≥mo migr√© mi sitio desde Aswarepace a Netlify con dominio personalizado, usando Cloudflare como proxy y certificado SSL, y solucion√© un conflicto de rutas con React en subcarpeta.",
      "manual": "Ten√≠a un dominio en Hostinger, configurado para usar los DNS de Cloudflare. Antes redirig√≠a a Aswarepace, pero decid√≠ migrar todo el proyecto a Netlify, usando Cloudflare para el SSL.\n\nPrimero, cambi√© los nameservers en Hostinger a los de Cloudflare (`ns1.cloudflare.com`, etc). Luego, en Cloudflare, configur√© los registros DNS:\n\n- Tipo A (para el dominio ra√≠z) con las IPs oficiales de Netlify: `75.2.60.5` y `99.83.190.102`\n- Tipo CNAME para `www`, apuntando a mi subdominio de Netlify (`misitio.netlify.app`)\n\nCon eso, el dominio apuntaba correctamente a Netlify.\n\nEl problema vino despu√©s: mi estructura de proyecto ten√≠a un `index.html` principal, y dentro de una subcarpeta (`projects/`) ten√≠a un proyecto React con Vite. Netlify cargaba bien el HTML, pero no el React (pantalla negra).\n\nPara solucionarlo:\n\n1. En el `package.json` del proyecto React, agregu√©:\n```json\n\"homepage\": \"/projects\"\n```\n\n2. En `vite.config.js`, configur√©:\n```js\nbase: '/projects/',\nbuild: {\n  outDir: path.resolve(__dirname, '../projects'),\n  emptyOutDir: true\n}\n```\n\nEsto hace que el build de Vite se genere directamente dentro de `/projects`, que es donde se servir√° desde Netlify.\n\n3. En la ra√≠z del proyecto puse un archivo `netlify.toml` con:\n```toml\n[[redirects]]\nfrom = \"/projects/*\"\nto = \"/projects/index.html\"\nstatus = 200\n```\n\n4. Separ√© mi c√≥digo fuente de React en una carpeta `react-app/`, para evitar sobrescribir c√≥digo con los archivos de build.\n\nDespu√©s de hacer `npm run build` desde `react-app`, los archivos se generaban en `/projects`, listos para desplegarse.\n\nResultado: ahora mi dominio carga el HTML base en `/` y el proyecto React perfectamente en `/projects`.",
      "imagen": "deploy-react-netlify.webp",
      "categoria": "Despliegue Web",
      "fecha": "2025-07-25",
      "contenido": "En esta gu√≠a explico c√≥mo usar Netlify como hosting est√°tico para un sitio mixto con HTML y React, mientras mantengo Cloudflare como gestor de DNS y SSL. Tambi√©n muestro c√≥mo estructurar correctamente el proyecto para evitar errores comunes con Vite y React.",
      "contexto": "Ten√≠a un dominio en Hostinger apuntando a Cloudflare, y quer√≠a quitar Aswarepace para usar Netlify como hosting principal, manteniendo Cloudflare como capa de seguridad (SSL). Adem√°s, mi sitio ten√≠a una estructura mixta: HTML en ra√≠z y React en subcarpeta.",
      "problema": "Netlify mostraba pantalla negra en el proyecto React ubicado en `/projects`, porque el build no estaba bien configurado para rutas relativas y el contenido no se generaba donde deb√≠a.",
      "solucion": "Agregu√© `homepage` en `package.json`, configur√© el `vite.config.js` para que el build se hiciera en la carpeta correcta, y a√±ad√≠ redirecciones en `netlify.toml`. Tambi√©n separ√© el c√≥digo fuente en `react-app/` para no sobrescribir contenido al hacer el build."
    },
    {
      "id": "llave-ssh-githublap",
      "titulo": "Creaci√≥n y configuraci√≥n de nueva llave SSH para GitHub adicional (githublap)",
      "descripcion": "Generaci√≥n y uso de una segunda llave SSH para gestionar m√∫ltiples cuentas GitHub desde un mismo equipo, usando configuraciones personalizadas con el archivo `~/.ssh/config`.",
      "manual": "Quer√≠a usar una segunda cuenta de GitHub (llamada `githublap`) desde el mismo sistema donde ya ten√≠a configurada una llave SSH para mi cuenta principal. Para hacerlo:\n\n1. Gener√© una nueva llave SSH personalizada con:\n```bash\nssh-keygen -t ed25519 -C \"jahirysi@keemail.me\"\n```\nGuard√© la llave como `llave_gitlap` cuando me pregunt√≥ el nombre del archivo. Esto gener√≥ `llave_gitlap` y `llave_gitlap.pub`.\n\n2. Mov√≠ ambas llaves al directorio `~/.ssh` y les asign√© los permisos correctos:\n```bash\nmv llave_gitlap* ~/.ssh/\nchmod 600 ~/.ssh/llave_gitlap\nchmod 644 ~/.ssh/llave_gitlap.pub\n```\n\n3. Agregu√© la llave al `ssh-agent`:\n```bash\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/llave_gitlap\n```\n\n4. Configur√© el archivo `~/.ssh/config` para que use esa llave con un host virtual personalizado llamado `githublap`:\n```ssh\nHost githublap\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/llave_gitlap\n```\n\n5. Sub√≠ la clave p√∫blica a la nueva cuenta de GitHub (GitHubLAP) en la secci√≥n de SSH Keys.\n\n6. Para clonar o conectarme a repos desde esa cuenta, us√© esta URL:\n```bash\ngit@githublap:jahiwh/nombre-del-repo.git\n```\n\n7. Al intentar cambiar la URL del repositorio con `git remote set-url`, me apareci√≥ un error porque no hab√≠a inicializado Git. Lo resolv√≠ con:\n```bash\ngit init\n```\nLuego pude agregar el remoto correctamente:\n```bash\ngit remote add origin git@githublap:jahiwh/nom.git\n```\n\nCon eso, pude trabajar con m√∫ltiples cuentas GitHub desde el mismo sistema, usando llaves SSH separadas.",
      "imagen": "ssh-multiaccount.webp",
      "categoria": "Control de versiones",
      "fecha": "2025-07-25",
      "contenido": "Gu√≠a pr√°ctica para configurar m√∫ltiples llaves SSH en un solo sistema Linux, permitiendo usar m√°s de una cuenta de GitHub (u otros servicios git) sin conflictos.",
      "contexto": "Ya ten√≠a configurada una llave SSH para GitHub, pero necesitaba usar una cuenta adicional ('githublap') sin interferir con la configuraci√≥n actual.",
      "problema": "Al usar una sola llave para m√∫ltiples cuentas de GitHub, se generaban errores de autenticaci√≥n o conflictos de identidad. Adem√°s, olvid√© c√≥mo inicializar correctamente un repositorio local.",
      "solucion": "Gener√© una nueva llave SSH con un nombre distinto, la a√±ad√≠ al agente y la configur√© con un alias (`githublap`) en `~/.ssh/config`. Tambi√©n inicialic√© el repositorio con `git init` para poder modificar correctamente la URL remota."
    },
    {
      "id": "kitty-zellij-starship-setup",
      "titulo": "Configuraci√≥n avanzada de terminal Kitty + Zellij + Starship en MX Linux/Debian",
      "descripcion": "Configuraci√≥n completa de un entorno de desarrollo moderno en consola usando Kitty como terminal, Zellij como multiplexor, Starship como prompt, e integraci√≥n de fuente Nerd Font 0xProto. Se a√±adieron herramientas CLI con inteligencia artificial similares a Warp.",
      "manual": "Comenc√© usando la terminal por defecto en MX Linux, pero quer√≠a una experiencia m√°s r√°pida y moderna. Prob√© Kitty por su velocidad, y lo combin√© con Zellij para manejar m√∫ltiples paneles. Tambi√©n ven√≠a de usar Warp, as√≠ que busqu√© integrar funciones similares como autocompletado, IA y visuales.\n\n‚úÖ Primero, instal√© **Kitty**, un emulador de terminal GPU-accelerated. Luego a√±ad√≠ **Zellij**, un multiplexor moderno similar a tmux pero m√°s intuitivo.\n\n‚úÖ Integr√© **Starship** como prompt visual y r√°pido, compatible con cualquier shell. Us√© `curl` para instalarlo y lo activ√© seg√∫n mi shell (Fish y Zsh).\n\n‚úÖ Para mejorar la est√©tica y compatibilidad de √≠conos, descargu√© e instal√© **0xProto Nerd Font v2.300**, descomprim√≠ el `.zip` en `~/.fonts/`, actualic√© el cach√© con `fc-cache -fv` y lo configur√© en `kitty.conf`.\n\n‚úÖ En cuanto al dise√±o, ajust√© la transparencia y los colores de Kitty para un estilo m√°s sobrio y gris√°ceo, pensado para trabajar horas. Cambi√© la opacidad, remov√≠ el fondo animado, y seleccion√© colores m√°s apagados con mayor legibilidad.\n\n‚úÖ En el entorno del servidor, resolv√≠ errores con `xterm-kitty` que causaban problemas con herramientas como `nano` o `ssh`, e instal√© `terminfo` para corregirlo. Tambi√©n instal√© herramientas como `nmtui`, `nmcli` y `network-manager` para poder conectarme a redes WiFi desde consola sin entorno gr√°fico.\n\n‚úÖ Como alternativa a Warp, instal√© `aider` (CLI con GPT) v√≠a pip, que permite editar archivos con ayuda de IA desde terminal.\n\n‚úÖ Finalmente, mape√© y aprend√≠ los atajos m√°s comunes de Zellij y Kitty para abrir paneles, dividir ventanas y buscar comandos escritos.",
      "imagen": "terminal-setup.webp",
      "categoria": "Terminal / DevOps",
      "fecha": "2025-07-25",
      "contenido": "En esta gu√≠a se detalla c√≥mo transformar tu terminal en un entorno de desarrollo moderno y eficiente, especialmente √∫til si administras servidores o trabajas sin entorno gr√°fico. Incluye instalaci√≥n de herramientas clave, integraci√≥n visual, autocompletado y herramientas IA desde consola.",
      "contexto": "Buscaba una terminal m√°s r√°pida, moderna y est√©tica para trabajar muchas horas en consola, tanto local como remotamente. Antes usaba Warp, pero me pas√© a Kitty + Zellij por su ligereza y compatibilidad con servidores.",
      "problema": "No ten√≠a autocompletado ni IA en la nueva terminal. Algunos errores aparec√≠an con `xterm-kitty` al usar ssh, y quer√≠a una forma m√°s sencilla de conectarme a redes WiFi desde consola.",
      "solucion": "Instal√© `Kitty`, `Zellij`, `Starship`, `aider`, `fzf`, `bat`, `fd`, `ripgrep`, y shell `Fish/Zsh`. Instal√© manualmente la Nerd Font `0xProto`, activ√© `starship` seg√∫n el shell, y modifiqu√© `kitty.conf` para mayor legibilidad. Para redes WiFi, us√© `nmtui` y `nmcli`, y resolv√≠ el error `xterm-kitty` instalando los terminfo adecuados. Ahora tengo un entorno liviano, potente y visualmente agradable, con soporte IA en consola."
    },    
    
    {
      "id": "jellyfin-reparacion-sudo",
      "titulo": "Reparaci√≥n de sistema Linux tras cambiar permisos cr√≠ticos (sudo, Jellyfin)",
      "descripcion": "Recuperaci√≥n de un servidor Linux que perdi√≥ acceso a sudo y fallaba al iniciar Jellyfin tras un cambio incorrecto de permisos.",
      "manual": "Cambi√© los permisos de muchos archivos del sistema, incluyendo `/usr/bin/sudo`, para poder copiar archivos en un disco montado. Esto provoc√≥ que `sudo` dejara de funcionar con errores como:\n\n```bash\nsudo: /etc/sudo.conf is owned by uid 1000, should be 0\nsudo: /usr/bin/sudo debe ser propiedad del uid 0 y tener el bit setuid establecido\n```\n\nTambi√©n, el comando `su` daba errores como:\n`su: cannot set groups: Operaci√≥n no permitida`\n\nMe di cuenta de que algunos archivos del sistema estaban bajo mi usuario (ahir) en lugar de root.\n\n**¬øQu√© hice?**\n\n1. Conect√© el disco del servidor afectado a mi laptop usando un adaptador SATA o similar.\n2. Inici√© un sistema Live Linux (como Elementary OS Live).\n3. Detect√© la partici√≥n ra√≠z del sistema da√±ado con `lsblk` (en mi caso, `/dev/sdb2`).\n4. Mont√© esa partici√≥n:\n   ```bash\n   sudo mount /dev/sdb2 /mnt\n   sudo mount --bind /dev /mnt/dev\n   sudo mount --bind /proc /mnt/proc\n   sudo mount --bind /sys /mnt/sys\n   sudo chroot /mnt\n   ```\n5. Una vez dentro del sistema como `root`, cre√© un script para restaurar los permisos correctos en archivos como:\n   - `/usr/bin/sudo`\n   - `/etc/sudo.conf`\n   - `/bin/su`\n   - `/usr/bin/passwd`\n   - otros comandos con setuid (`chsh`, `chfn`, etc.)\n\n6. El script tambi√©n escane√≥ directorios cr√≠ticos como `/etc`, `/usr`, `/bin`, etc., y corrigi√≥ archivos que hab√≠an sido accidentalmente asignados a mi usuario.\n\n**Problema adicional con Jellyfin:**\nDespu√©s de reparar `sudo`, Jellyfin tampoco funcionaba. El servicio fallaba con:\n```bash\njellyfin.service: Failed with result 'signal'.\nMain PID: ... (code=killed, signal=ABRT)\n```\n\n**Soluci√≥n:**\n- Verifiqu√© los logs con `journalctl -xeu jellyfin`\n- Encontr√© que muchos archivos de Jellyfin (en `/var/lib/jellyfin`, `/etc/jellyfin`, etc.) no pertenec√≠an al usuario `jellyfin`.\n- Repar√© permisos con:\n   ```bash\n   chown -R jellyfin:jellyfin /var/lib/jellyfin\n   chown -R jellyfin:jellyfin /etc/jellyfin\n   chown -R jellyfin:jellyfin /var/log/jellyfin\n   ```\n- Finalmente reinici√© el servicio:\n   ```bash\n   systemctl restart jellyfin\n   ```\n\nCon eso, Jellyfin volvi√≥ a iniciar correctamente.",
      "imagen": "repair-sudo-jellyfin.webp",
      "categoria": "Servidores",
      "fecha": "2025-07-25",
      "contenido": "En esta gu√≠a se explica c√≥mo recuperar un sistema Linux da√±ado tras un cambio incorrecto de permisos que afecta a comandos esenciales como `sudo` y al servicio multimedia `Jellyfin`.",
      "contexto": "Modifiqu√© los permisos de todo el sistema mientras intentaba copiar archivos desde una partici√≥n montada, lo que dej√≥ el sistema sin acceso a `sudo` ni capacidad para iniciar Jellyfin.",
      "problema": "`sudo` dej√≥ de funcionar con errores de permisos. `su` no pod√≠a cambiar de grupo. Adem√°s, Jellyfin no iniciaba con error de proceso abortado (ABRT).",
      "solucion": "Us√© un sistema Live para montar el sistema da√±ado, entr√© con `chroot` y restaur√© permisos cr√≠ticos con un script personalizado. Tambi√©n correg√≠ la propiedad de los archivos de Jellyfin para que el servicio pudiera arrancar nuevamente."
    }
        
  ],
  "categorias": [
    "Linux",
    "Servidores",
    "Redes",
    "Errores comunes",
    "Configuraciones",
    "Software libre"
  ]
}